<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 将多个配置文件读取到容器中，交给Spring管理 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!-- 这里支持多种寻址方式：classpath和file -->
				<value>classpath:config/properties/jdbc.properties</value>
				<!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->
				<!--<value>file:/opt/demo/config/demo-mq.properties</value> -->
			</list>
		</property>
	</bean>


	<!-- writeStart-->
	<bean id="db_dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${pms.db.driverClassName}" />
		<property name="url" value="${pms.db.url}" />
		<property name="username" value="${pms.db.username}" />
		<property name="password" value="${pms.db.password}" />

		<!-- 是否要进行检测 -->
		<property name="testWhileIdle" value="true" />
		<!--进行检测一个连接是有效的SQL语句，比如oracle是select 1 from dual 而 mysql是 select 1 -->
		<property name="validationQuery" value="select 1" />

		<!--一次数据库操作执行时间超过多少秒的连接被认为是需要移除的 -->
		<property name="removeAbandonedTimeout" value="180" />
		<!--每隔多少时间检测一次，比如每半小时检测一次，总不能总是检测，这会对性能产生影响 -->
		<property name="timeBetweenEvictionRunsMillis" value="1800000" />
		<!--每次检测时，需要检测多少个数据连接，一般设置为与最大连接数一样，这样就可以检测完所有的连接 -->
		<property name="numTestsPerEvictionRun" value="3" />
		<!--一个数据库连接连接多少时间之外，我们认为其应该不再适用了(可能下一次就会失效了)，应该移除并重新建立连接了 -->
		<property name="minEvictableIdleTimeMillis" value="1800000" />
	</bean>

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
	    <property name="maxUploadSize" value="10485760000" />  
	</bean>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
		abstract="false" lazy-init="default" autowire="default"
		dependency-check="default">
		<!-- 指定数据源 -->
		<property name="dataSource">
			<ref bean="db_dataSource" />
		</property>
	</bean>


	<bean id="datacommand_write" class="com.myb.framework.data.DataCommand"
		abstract="false" lazy-init="default" autowire="default"
		dependency-check="default">

		<property name="jdbcTemplate">
			<ref bean="jdbcTemplate" />
		</property>
	</bean>
	<!--writeEnd  -->

	<!-- ReadStart-->
	<bean id="db_dataSourceRead" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${readpms.db.driverClassName}" />
		<property name="url" value="${readpms.db.url}" />
		<property name="username" value="${readpms.db.username}" />
		<property name="password" value="${readpms.db.password}" />

		<!-- 是否要进行检测 -->
		<property name="testWhileIdle" value="true" />
		<!--进行检测一个连接是有效的SQL语句，比如oracle是select 1 from dual 而 mysql是 select 1 -->
		<property name="validationQuery" value="select 1" />

		<!--一次数据库操作执行时间超过多少秒的连接被认为是需要移除的 -->
		<property name="removeAbandonedTimeout" value="180" />
		<!--每隔多少时间检测一次，比如每半小时检测一次，总不能总是检测，这会对性能产生影响 -->
		<property name="timeBetweenEvictionRunsMillis" value="1800000" />
		<!--每次检测时，需要检测多少个数据连接，一般设置为与最大连接数一样，这样就可以检测完所有的连接 -->
		<property name="numTestsPerEvictionRun" value="3" />
		<!--一个数据库连接连接多少时间之外，我们认为其应该不再适用了(可能下一次就会失效了)，应该移除并重新建立连接了 -->
		<property name="minEvictableIdleTimeMillis" value="1800000" />
		
	</bean>


	<bean id="jdbcTemplateRead" class="org.springframework.jdbc.core.JdbcTemplate"
		abstract="false" lazy-init="default" autowire="default"
		dependency-check="default">
		<!-- 指定数据源 -->
		<property name="dataSource">
			<ref bean="db_dataSourceRead" />
		</property>
	</bean>


	<bean id="datacommand_read" class="com.myb.framework.data.DataCommand"
		abstract="false" lazy-init="default" autowire="default"
		dependency-check="default">
		
		<property name="jdbcTemplate">
			<ref bean="jdbcTemplate" />
		</property>
	</bean>
	<!--ReadEnd  -->

	<bean id="db_transaction"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager ">
		<property name="dataSource">
				<ref bean="db_dataSource" />
		</property>
	</bean>


	<bean id="db_transactionRead"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager ">
		<property name="dataSource">
				<ref bean="db_dataSourceRead" />
		</property>
	</bean>
	
	<!--只读库，可写库，可写另一个库  -->
	<context:component-scan base-package="com.myb.**.dao" />
	<context:component-scan base-package="com.myb.**.services" />
	<tx:annotation-driven transaction-manager="db_transaction" />

</beans>